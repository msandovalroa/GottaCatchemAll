const Router = require("koa-router");
const uuid = require("uuid").v4;

const ordersRouter = new Router({ prefix: "/orders" });
const ordersData = require("../lib/orders");

ordersRouter.post("/", async (ctx) => {
  ctx.body = ctx.request.body;
  const { customerName, items } = ctx.body;

  console.log(customerName)
  console.log(items)

  if (!items.length) {
    ctx.throw(409, "No items ordered");
  }

  const total = items.reduce(
    (orderTotal, item) => (orderTotal += item.price),
    0
  );
  const order = {
    id: uuid(),
    customerName,
    createdOn: new Date(),
    items,
    total,
  };

  ctx.status = 201;
  ctx.body = [...ordersData, order];
});

ordersRouter.get("/", async (ctx) => {
//   const filterProperty =  Object.keys(ctx.request.query)
//   const filterValue = Object.values(ctx.request.query)


const filterProperty =  'name'
const filterValue = 'Cheeseburger'

  console.log(filterProperty, filterValue)
  

  let results = ordersData;

  if (filterProperty && filterValue) {
      console.log("here")
    const filteredResults = ordersData.filter(({ items }) =>
      items.filter((item) => item['name'].includes('Cheeseburger'))
    );
    console.log(filteredResults)
    results = filteredResults;
  }

  ctx.status = 200;
  ctx.body = results;
});

ordersRouter.get("/:id", async (ctx) => {
  const { id } = ctx.params;
  const order = ordersData.find((order) => order.id === id);

  if (!order) {
    ctx.throw(404, "Order not found");
  }

  ctx.status = 200;
  ctx.body = order;
});

ordersRouter.put("/:id", async (ctx, next) => {
  const { id } = ctx.params;
  const customerName = ctx.request.body.customerName;
  const items = JSON.parse(ctx.request.body.items);

  const order = ordersData.find((order) => order.id === id);

  if (!order) {
    ctx.throw(404, "Could not find order");
  }

  if (items.quantity && items.price) {
    const price = items.quantity * items.price + order.price;
    order.price = price;
  }

  if (customerName) {
    order.customerName = customerName;
  }
  order.items.push(items);

  const updated = {
    ...order,
  };

  ctx.status = 200;
  ctx.body = updated;
});

ordersRouter.delete("/:id", async (ctx) => {
  const { id } = ctx.params;
  console.log(id);

  const order = ordersData.find((order) => order.id === id);

  if (!order) {
    ctx.throw(404, "Could not find order");
  }

  //   const latest = ordersData.reduce((a, b) =>
  //     a.createdOn > b.createdOn ? a : b
  //   );

  const latest = id;

  console.log(latest.id);
  const remaining = ordersData.filter(({ id }) => id !== latest);

  ctx.status = 200;
  ctx.body = remaining;
});

module.exports = ordersRouter;
